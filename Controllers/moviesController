const Movie = require("../Models/movieModel");

exports.getAllMovies = async (req, res) => {
  try {
    //Mongoose 6.0 or less
    /*  const excludeFields = ["sort", "page", "limit", "fields"];
    const queryObject = { ...req.query };
    excludeFields.forEach((field) => {
      delete queryObject[field];
    });
    const movies = await Movie.find(queryObject); */
    console.log(req.query);
    let queryString = JSON.stringify(req.query);
    queryString = queryString.replace(
      /\b(gte|gt|lte|lt)\b/g,
      (match) => `$${match}`
    );
    const queryObject = JSON.parse(queryString);
    console.log(queryObject);

    const movies = await Movie.find(queryObject);

    /* const movies = await Movie.find()
      .where("duration")
      .equals(req.query.duration)
      .where("ratings")
      .equals(req.query.ratings); */
    res.status(200).json({
      status: "success",
      length: movies.length,
      data: {
        movies,
      },
    });
  } catch (err) {
    res.status(404).json({
      status: "fail",
      message: err.message,
    });
  }
};

exports.getMovie = async (req, res) => {
  try {
    //const movie = await Movie.find({ id: req.params.id });
    const movie = await Movie.findById(req.params.id);
    res.status(200).json({
      status: "success",
      data: {
        movie,
      },
    });
  } catch (err) {
    res.status(404).json({
      status: "fail",
      message: err.message,
    });
  }
};

exports.createMovie = async (req, res) => {
  try {
    const movie = await Movie.create(req.body);
    res.status(201).json({
      status: "success",
      data: {
        movie: movie,
      },
    });
  } catch (err) {
    if (err.name === "ValidationError") {
      // Handling validation errors
      const validationErrors = Object.values(err.errors).map(
        (error) => error.message
      );

      return res.status(400).json({
        status: "fail",
        message: `Validation error: ${validationErrors.join(", ")}`,
      });
    }

    // Handling other types of errors
    res.status(500).json({
      status: "error",
      message: err.message,
    });
  }
};

exports.updateMovie = async (req, res) => {
  try {
    const updatedMovie = await Movie.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    res.status(200).json({
      status: "success",
      data: {
        movie: updatedMovie,
      },
    });
  } catch (err) {
    res.status(404).json({
      status: "fail",
      message: err.message,
    });
  }
};

exports.deleteMovie = async (req, res) => {
  try {
    const updatedMovie = await Movie.findByIdAndDelete(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    res.status(204).json({
      status: "success",
      data: null,
    });
  } catch (err) {
    res.status(404).json({
      status: "fail",
      message: err.message,
    });
  }
};
